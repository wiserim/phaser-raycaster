{"version":3,"sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/overlap.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/raycaster-core.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/map-tilemap-methods.js","webpack://PhaserRaycaster/./src/map/map-matterBody-methods.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/map/boundingBox.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js","webpack://PhaserRaycaster/./src/ray/slice.js","webpack://PhaserRaycaster/./src/ray/enablePhysics.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setRayRange","rayRange","Phaser","Math","MAX_SAFE_INTEGER","this","Geom","Line","SetToAngle","_ray","origin","x","y","angle","setDetectionRange","detectionRange","detectionRangeCircle","setTo","setCollisionRange","collisionRange","oldRangeMax","collisionCircle","setRadius","bodyType","bounds","_raycaster","boundingBox","scene","matter","body","set","shape","type","rectangle","centerX","centerY","width","height","circleRadius","isStatic","setCircle","boundsInRange","objectBounds","raycasterMap","getBoundingBox","data","Intersects","CircleToRectangle","overlap","objects","targets","overlapCircle","Circle","undefined","query","collides","getMatterBodies","bodyA","bodyB","testMatterOverlap","push","Array","isArray","physics","overlapCirc","bodies","hitbox","isCircle","position","halfWidth","Rectangle","testOverlap","gameObject","CircleToCircle","testArcadeOverlap","processOverlap","object1","object2","target","obj1","length","slicedIntersections","slice","TriangleToCircle","RectangleToTriangle","parts","splice","part","pointA","vertices","pointB","segment","TriangleToLine","Triangle","ContainsPoint","getPointA","getPointB","setAngle","Angle","Normalize","setAngleDeg","DegToRad","setCone","cone","setConeDeg","PhaserRaycaster","systems","sys","settings","isBooted","events","once","boot","register","PluginManager","eventEmitter","on","start","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","destroy","test","console","log","time","delta","createRaycaster","options","_Raycaster","constructor","require","Raycaster","version","graphics","mappedObjects","sortedPoints","mapSegmentCount","world","walls","top","bottom","setOptions","autoUpdate","add","lineStyle","color","fillStyle","mapGameObjects","setBoundingBox","points","segments","Point","left","right","dynamic","segmentCount","includes","config","option","map","Map","setDataEnabled","removeMappedObjects","index","indexOf","enableMaps","active","disableMaps","mapppedObject","updateMap","createRay","Ray","raycaster","circle","_points","_segments","getPoints","getSegments","line","polygon","arc","container","tilemap","matterBody","setSegmentCount","collisionTiles","setCollisionTiles","setOrigin","forceConvex","forceVerticesMapping","getTopLeft","getTopRight","getBottomRight","getBottomLeft","offset","displayWidth","originX","displayHeight","originY","geom","rotation","vectorA","scaleX","scaleY","Length","vectorB","point","vector","closePath","last","ray","rayA","rayB","cB","rayLength","sqrt","pow","radius","dAngle","asin","newPoints","getCircles","tempRay","list","child","iterate","childPoints","iLength","childA","mapA","j","jLength","childB","mapB","RectangleToRectangle","getBounds","segmentA","segmentB","intersection","LineToLine","Distance","Between","x1","y1","x2","y2","LineToCircle","horizontal","horizontals","verticals","layer","row","tile","upperEdge","leftEdge","vertical","tileWidth","tileHeight","verticalsLastColumn","column","filter","horizontalSegment","tiles","scale","generateBounds","bodyItem","find","segmentIndex","findIndex","closingSegment","composite","min","max","count","ignoreNotIntersectedRays","round","autoSlice","intersections","setRay","cast","castCircle","castCone","enablePhysics","angleDeg","coneDeg","closestIntersection","closestDistance","GetLineToRectangle","distance","result","Equals","isTangent","circleIntersections","GetLineToCircle","originalAngle","maps","rayTargets","testedObjects","objectB","sort","a","b","previousTarget","castSides","roundedTarget","intersectionA","intersectionB","minAngle","maxAngle","angleOffsetDeg","RadToDeg","ShortestBetween","abs","closed","slices","label","isSensor","ignoreGravity","existing","setAllowGravity","setImmovable"],"mappings":"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","file":"phaser-raycaster.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/**\n * Set ray's range.\n *\n * @method Raycaster.Ray#setRayRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} [rayRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRayRange(rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.rayRange = rayRange;\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's maximum detection range. Objects outside detection range won't be tested.\n * Ray tests all objects when set to 0.\n *\n * @method Raycaster.Ray#setDetectionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} [detectionRange = 0] - Maximum distance between ray's position and tested objects bounding boxes.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setDetectionRange(detectionRange = 0) {\n    this.detectionRange = detectionRange;\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    return this;\n}\n\n/**\n * Set ray's field of view maximum collision range. Objects outside collision range won't be tested by {@link Raycaster.Ray#overlap Raycaster.Ray.overlap} method.\n * Determines ray's physics body radius.\n *\n * @method Raycaster.Ray#setCollisionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {integer} [collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's collision range and physics body radius.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionRange(collisionRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    let oldRangeMax = this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER;\n    this.collisionRange = collisionRange;\n    this.collisionCircle.setRadius(this.collisionRange);\n\n    if(this.bodyType === 'matter') {\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'rectangle',\n                    x: bounds.rectangle.centerX,\n                    y: bounds.rectangle.centerY,\n                    width: bounds.rectangle.width,\n                    height: bounds.rectangle.height,\n                    circleRadius:0\n                }\n            });\n        }\n        else if(oldRangeMax) {\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'circle',\n                    x: this.collisionCircle.x,\n                    y: this.collisionCircle.y\n                },\n                circleRadius: this.collisionRange,\n                isStatic: false\n            });\n        }\n        else {\n            this.collisionCircle.setRadius(this.collisionRange);\n        }\n        this._raycaster.scene.matter.body.set(this.body, 'circleRadius', this.collisionRange)\n    }\n    else if(this.bodyType === 'arcade') {\n        this.body.setCircle(this.collisionRange);\n    }\n\n    return this;\n}\n\n/**\n * Test if object's bounding box is in ray's detection range.\n *\n * @method Raycaster.Ray#boundsInRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} object - Tested object\n * @param {(Phaser.Geom.Rectangle|boolean)} [bounds = false] - Tested object's bounds. If not passed bounds will be generated automatically.\n *\n * @return {boolean} Information if object is in ray's detection range.\n */\nexport function boundsInRange(object, bounds = false) {\n    if(!this.detectionRange)\n        return true;\n\n    let objectBounds;\n    if(bounds)\n        objectBounds = bounds;\n    else {\n        if(object.type === 'body' || object.type === 'composite')\n            objectBounds = object.raycasterMap.getBoundingBox();\n        else\n            objectBounds = object.data.get('raycasterMap').getBoundingBox();\n    }\n\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\n        return true;\n\n    return false;\n}\n","/**\n * Get game objects overlaping field of view.\n *\n * @method Raycaster.Ray#overlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object|object[]} [objects] - Game object / array off game objects to test.\n *\n * @return {object[]} Array of game objects that overlaps with field of view.\n */\nexport function overlap(objects) {\n    let targets = [];\n    let overlapCircle = new Phaser.Geom.Circle(this.origin.x, this.origin.y, this.collisionRange);\n\n    //matter physics\n    if(this.bodyType === 'matter') {\n        let isCollisionInfo = false;\n        if(objects === undefined) {\n            objects = this._raycaster.scene.matter.query.collides(this.body, this._raycaster.scene.matter.getMatterBodies());\n\n            for(let object of objects) {   \n                let body = object.bodyA === this.body ? object.bodyB : object.bodyA;\n\n                if(this.testMatterOverlap(body))\n                    targets.push(body);\n            }\n        }\n        //get object's body\n        else {\n            if(!Array.isArray(objects))\n                objects = [objects];\n            \n            for(let object of objects) {\n                if(object === this.body)\n                    continue;\n    \n                if(this.testMatterOverlap(object))\n                    targets.push(object);\n            }\n        }\n    }\n    //arcade physics\n    else {\n        //get bodies in range\n        if(objects === undefined) {\n            objects = this._raycaster.scene.physics.overlapCirc(this.origin.x, this.origin.y, this.collisionRange, true, true);\n            bodies = true;\n        }\n        //get object's body\n        else if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n        //if objects are bodies\n        if(bodies) {\n            for(let body of objects) {\n                if(body === this.body)\n                    continue;\n            \n                let hitbox;\n                //get physics body hitbox\n                if(body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(body.position.x + body.halfWidth, body.position.y + body.halfWidth, body.halfWidth);\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(body.x, body.y, body.width, body.height);\n                }\n\n                if(this.testOverlap(hitbox))\n                    targets.push(body.gameObject);\n            }\n        }\n        //if objects are game objects\n        else {\n            for(let object of objects) {\n                if(object.body === undefined)\n                    continue;\n\n                let hitbox;\n                //get physics body hitbox\n                if(object.body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(object.body.position.x + object.body.halfWidth, object.body.position.y + object.body.halfWidth, object.body.halfWidth);\n                    if(!Phaser.Geom.Intersects.CircleToCircle(overlapCircle, hitbox))\n                        continue;\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(object.body.x, object.body.y, object.body.width, object.body.height);\n                    if(!Phaser.Geom.Intersects.CircleToRectangle(overlapCircle, hitbox))\n                        continue;\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(object);\n            }\n        }\n    }\n\n    return targets;\n}\n\n/**\n * Process callback for physics collider / overlap.\n *\n * @method Raycaster.Ray#processOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object} object1 - Game object or matter body passed by collider / overlap or matter CollisionInfo object.\n * @param {object} object2 - Game object or matter body passed by collider / overlap. Ignored if matter CollisionInfo object was passed as first argument.\n *\n * @return {boolean} Return true if game object is overlapping ray's field of view.\n */\nexport function processOverlap(object1, object2) {\n    let target;\n    //check if it's matter collisionInfo object\n    if(object1.bodyA !== undefined && object1.bodyB !== undefined) {\n        object2 = object1.bodyB;\n        object1 = object1.bodyA;\n    }\n\n    if(object1._ray !== undefined && object1._ray === this)\n        target = object2;\n    else if(object2._ray !== undefined && object2._ray === this)\n        target = obj1;\n    else\n        return false;\n\n    return (this.overlap(target).length > 0);\n}   \n\n/**\n * Test if hitbox overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testArcadeOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.8.0\n *\n * @param {object} hitbox - Game object's hitbox generated inside {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @return {boolean} True if hitbox overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testArcadeOverlap(hitbox) {\n    let overlap = false;\n\n    //iterate through field of view slices to check collisions with target\n    for(let slice of this.slicedIntersections) {\n        //if hitbox is a circle\n        if(hitbox.type == 0) {\n            overlap = Phaser.Geom.Intersects.TriangleToCircle(slice, hitbox);\n        }\n        //if hitbox is a rectangle\n        else {\n            overlap = Phaser.Geom.Intersects.RectangleToTriangle(hitbox, slice);\n        }\n\n        if(overlap) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Test if matter body overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testMatterOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.9.0\n *\n * @param {object} body - Matter body.\n *\n * @return {boolean} True if body overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testMatterOverlap(object) {\n    let overlap = false;\n    let body;\n\n    if(object.type === 'body')\n        body = object;\n    else if(object.body !== undefined)\n        body = object.body;\n    else\n        return false;\n\n    //if body is concave, ignore convex body\n    let parts = body.parts.length > 1 ? body.parts.splice(1) : body.parts;\n    //iterate through bodies\n    for(let part of parts) {\n        let pointA = part.vertices[0];\n\n        for(let i = 1, length = part.vertices.length; i < length; i++) {\n            let pointB = part.vertices[i];\n            let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n\n            //iterate through field of view slices to check collisions with target\n            for(let slice of this.slicedIntersections) {\n                let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n                //additional checking if slice contain segment's points due to TriangleToLine bug.\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointA());\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointB());\n\n                if(overlap) {\n                    return true;\n                }\n            }\n            pointA = pointB;\n        }\n\n        //closing segment\n        let segment = new Phaser.Geom.Line(part.vertices[part.vertices.length - 1].x, part.vertices[part.vertices.length - 1].y, part.vertices[0].x, part.vertices[0].y);\n         //iterate through field of view slices to check collisions with target\n        for(let slice of this.slicedIntersections) {\n            let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n\n            if(overlap) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n","/**\n * Set ray's angle (direction) in radians.\n *\n * @method Raycaster.Ray#setAngle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {float} [angle = 0] - Ray's angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngle(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's angle (direction) in degrees.\n *\n * @method Raycaster.Ray#setAngleDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.1\n *\n * @param {float} [angle = 0] - Ray's angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngleDeg(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n","/**\n * Set ray's cone angle (width) in radians.\n *\n * @method Raycaster.Ray#setCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {float} [cone = 0] - Ray's cone angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCone(cone = 0) {\n    this.cone = cone;\n    return this;\n}\n\n/**\n * Set ray's cone angle (width) in degrees.\n *\n * @method Raycaster.Ray#setConeDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {float} [cone = 0] - Ray's cone angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setConeDeg(cone = 0) {\n    this.cone = Phaser.Math.DegToRad(cone);\n    return this;\n}\n","var PhaserRaycaster = function (scene)\n{\n    //The Scene that owns this plugin\n    this.scene = scene;\n\n    this.systems = scene.sys;\n\n    if (!scene.sys.settings.isBooted)\n    {\n        scene.sys.events.once('boot', this.boot, this);\n    }\n};\n\n//Static function called by the PluginFile Loader.\nPhaserRaycaster.register = function (PluginManager)\n{\n    //  Register this plugin with the PluginManager, so it can be added to Scenes.\n\n    //  The first argument is the name this plugin will be known as in the PluginManager. It should not conflict with already registered plugins.\n    //  The second argument is a reference to the plugin object, which will be instantiated by the PluginManager when the Scene boots.\n    //  The third argument is the local mapping. This will make the plugin available under `this.sys.base` and also `this.base` from a Scene if\n    //  it has an entry in the InjectionMap.\n    PluginManager.register('PhaserRaycaster', PhaserRaycaster, 'base');\n};\n\nPhaserRaycaster.prototype = {\n\n    //  Called when the Plugin is booted by the PluginManager.\n    //  If you need to reference other systems in the Scene (like the Loader or DisplayList) then set-up those references now, not in the constructor.\n    boot: function ()\n    {\n        var eventEmitter = this.systems.events;\n\n        //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\n        //  If you don't need any of these events then remove the listeners and the relevant methods too.\n\n        eventEmitter.on('start', this.start, this);\n\n        eventEmitter.on('preupdate', this.preUpdate, this);\n        eventEmitter.on('update', this.update, this);\n        eventEmitter.on('postupdate', this.postUpdate, this);\n\n        eventEmitter.on('pause', this.pause, this);\n        eventEmitter.on('resume', this.resume, this);\n\n        eventEmitter.on('sleep', this.sleep, this);\n        eventEmitter.on('wake', this.wake, this);\n\n        eventEmitter.on('shutdown', this.shutdown, this);\n        eventEmitter.on('destroy', this.destroy, this);\n    },\n\n    //A test method.\n    test: function (name)\n    {\n        console.log('RaycasterPlugin says hello ' + name + '!');\n    },\n\n    //Called when a Scene is started by the SceneManager. The Scene is now active, visible and running.\n    start: function ()\n    {\n    },\n\n    //Called every Scene step - phase 1\n    preUpdate: function (time, delta)\n    {\n    },\n\n    //Called every Scene step - phase 2\n    update: function (time, delta)\n    {\n    },\n\n    //Called every Scene step - phase 3\n    postUpdate: function (time, delta)\n    {\n    },\n\n    //Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\n    pause: function ()\n    {\n    },\n\n    //Called when a Scene is resumed from a paused state.\n    resume: function ()\n    {\n    },\n\n    //Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\n    sleep: function ()\n    {\n    },\n\n    //Called when a Scene is woken from a sleeping state.\n    wake: function ()\n    {\n    },\n\n    //Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\n    shutdown: function ()\n    {\n    },\n\n    //Called when a Scene is destroyed by the Scene Manager. There is no coming back from a destroyed Scene, so clear up all resources here.\n    destroy: function ()\n    {\n        this.shutdown();\n\n        this.scene = undefined;\n    },\n\n    //Create Raycaster object\n    createRaycaster: function(options = {}) {\n        options.scene = this.scene;\n        return new this._Raycaster(options);\n    }\n\n};\n\nPhaserRaycaster.prototype.constructor = PhaserRaycaster;\nPhaserRaycaster.prototype._Raycaster = require('./raycaster-core.js').Raycaster;\n\n//Make sure you export the plugin for webpack to expose\n\nmodule.exports = PhaserRaycaster;\n","/**\n* @author       Marcin Walczak <contact@marcin-walczak.pl>\n* @copyright    2020 Marcin Walczak\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\n*/\n\n/**\n * @classdesc\n *\n * Raycaster class responsible for creating ray objects and managing mapped objects.\n * \n * @namespace Raycaster\n * @class Raycaster\n * @constructor\n * @since 6.0.0\n *\n * @param {object} [options] - Raycaster's configuration options. May include:\n * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\n * @param {integer} [options.mapSegmentCount = 0] - Number of segments of circle maps. If set to 0, map will be teste\n * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\n * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\n * @param {boolean} [options.autoUpdate = true] - If set true, automatically update dynamic maps on scene update event.\n */\nexport function Raycaster(options) {\n    /**\n    * Plugin version.\n    *\n    * @name Raycaster#version\n    * @type {string}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.version = '0.9.0';\n    /**\n    * Raycaster's scene\n    *\n    * @name Raycaster#version\n    * @type {string}\n    * @private\n    * @since 0.6.0\n    */\n    this.scene;\n    this.graphics;\n\n    /**\n    * Raycaster's bounding box.\n    *\n    * @name Raycaster#boundingBox\n    * @type {Phaser.Geom.Rectangle}\n    * @default false\n    * @private\n    * @since 0.6.0\n    */\n    this.boundingBox = false;\n    /**\n    * Array of mapped game objects.\n    *\n    * @name Raycaster#mappedObjects\n    * @type {object[]}\n    * @since 0.6.0\n    */\n    this.mappedObjects = [];\n    this.sortedPoints = [];\n    /**\n    * Number of segments of circle maps.\n    *\n    * @name Raycaster#mapSegmentCount\n    * @type {integer}\n    * @default 0\n    * @since 0.6.0\n    */\n    this.mapSegmentCount = 0;\n\n    if(options !== undefined) {\n        if(options.boundingBox === undefined && options.scene !== undefined) {\n            if(options.scene.physics !== undefined)\n                options.boundingBox = options.scene.physics.world.bounds;\n            else if(options.scene.matter !== undefined) {\n                let walls = options.scene.matter.world.walls;\n\n                if(walls.top !== null) {\n                    options.boundingBox = new Phaser.Geom.Rectangle(\n                        walls.top.vertices[3].x,\n                        walls.top.vertices[3].y,\n                        walls.bottom.vertices[1].x - walls.top.vertices[3].x,\n                        walls.bottom.vertices[1].y - walls.top.vertices[3].y\n                    );\n                }\n            }\n        }\n\n        this.setOptions(options);\n\n        if(options.autoUpdate === undefined || options.autoUpdate)\n            //automatically update event\n            this.scene.events.on('update', this.update.bind(this));\n    }\n    else\n        //automatically update event\n        this.scene.events.on('update', this.update.bind(this));\n\n    return this;\n}\n\nRaycaster.prototype = {\n    /**\n    * Configure raycaster.\n    *\n    * @method Raycaster#setOptions\n    * @memberof Raycaster\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {object} [options] - Raycaster's congfiguration options. May include:\n    * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\n    * @param {integer} [options.mapSegmentCount = 0] - Number of segments of circle maps.\n    * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\n    * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\n    *\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\n    */\n    setOptions: function(options) {\n        if(options.scene !== undefined) {\n            this.scene = options.scene;\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\n        }\n\n        if(options.mapSegmentCount !== undefined)\n            this.mapSegmentCount = options.mapSegmentCount;\n\n        if(options.objects !== undefined)\n            this.mapGameObjects(options.objects);\n\n        if(options.boundingBox !== undefined)\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\n\n        return this;\n    },\n\n    /**\n    * Set Raycatser's bounding box.\n    *\n    * @method Raycaster#setBoundingBox\n    * @memberof Raycaster\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {integer} x - The X coordinate of the top left corner of bounding box.\n    * @param {integer} y - The Y coordinate of the top left corner of bounding box.\n    * @param {integer} width - The width of bounding box.\n    * @param {integer} height - The height of bounding box.\n    *\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\n    */\n    setBoundingBox: function(x, y, width, height) {\n        this.boundingBox = {\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\n            points: [],\n            segments: []\n        }\n        //set points\n        let points = [\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\n        ];\n\n        this.boundingBox.points = points;\n\n        //set segments\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\n            if(i+1 < length)\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n            else\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n        }\n    },\n\n    /**\n    * Map game objects\n    *\n    * @method Raycaster#mapGameObjects\n    * @memberof Raycaster\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {object|object[]} objects - Game object / matter body or array of game objects / matter bodies to map.\n    * @param {boolean} [dynamic = false] - {@link Raycaster.Map Raycaster.Map} dynamic flag (determines map will be updated automatically).\n    * @param {object} [options] - Additional options for {@link Raycaster.Map Raycaster.Map}\n    *\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\n    */\n    mapGameObjects: function(objects, dynamic = false, options = {}) {\n        options.dynamic = dynamic;\n        options.segmentCount = (options.segmentCount !== undefined) ? options.segmentCount : this.segmentCount;\n\n        if(!Array.isArray(objects))\n            objects = [objects];\n        \n        for(let object of objects) {\n            if(this.mappedObjects.includes(object))\n                continue;\n\n            let config = {};\n            for(let option in options) {\n                config[option] = options[option];\n            }\n            config.object = object;\n            \n            let map = new this.Map(config, this);\n\n            if(object.type === 'body' || object.type === 'composite') {\n                object.raycasterMap = map;\n            }\n            else if(!object.data) {\n                object.setDataEnabled();\n                object.data.set('raycasterMap', map);\n            }\n\n            this.mappedObjects.push(object);\n        }\n        return this;\n    },\n\n    /**\n    * Remove game object's {@link Raycaster.Map Raycaster.Map} maps.\n    *\n    * @method Raycaster#removeMappedObjects\n    * @memberof Raycaster\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be removed.\n    *\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\n    */\n    removeMappedObjects: function(objects) {\n        if(!Array.isArray(objects))\n            objects = [objects];\n\n        for(let object of objects) {\n            let index = this.mappedObjects.indexOf(object);\n            if(index >= 0)\n                this.mappedObjects.splice(index, 1)\n        }\n\n        return this;\n    },\n\n    /**\n    * Enable game object's {@link Raycaster.Map Raycaster.Map} maps.\n    *\n    * @method Raycaster#enableMaps\n    * @memberof Raycaster\n    * @instance\n    * @since 0.7.2\n    *\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be enabled.\n    *\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\n    */\n    enableMaps: function(objects) {\n        if(!Array.isArray(objects))\n            objects = [objects];\n        \n        for(let object of objects) {\n            let map;\n\n            if(object.type === 'body' || object.type === 'composite') {\n                map = object.raycasterMap;\n            }\n            else if(object.data) {\n                map = object.data.get('raycasterMap');\n            }\n\n            if(map)\n                map.active = true;\n        }\n\n        return this;\n    },\n\n    /**\n    * Disable game object's {@link Raycaster.Map Raycaster.Map} maps.\n    *\n    * @method Raycaster#disableMaps\n    * @memberof Raycaster\n    * @instance\n    * @since 0.7.2\n    *\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be disabled.\n    *\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\n    */\n    disableMaps: function(objects) {\n        if(!Array.isArray(objects))\n            objects = [objects];\n        \n        for(let object of objects) {\n            let map;\n\n            if(object.type === 'body' || object.type === 'composite') {\n                map = object.raycasterMap;\n            }\n            else if(object.data) {\n                map = object.data.get('raycasterMap');\n            }\n\n            if(map)\n                map.active = false;\n        }\n\n        return this;\n    },\n\n    /**\n    * Updates all {@link Raycaster.Map Raycaster.Map} dynamic maps. Fired on Phaser.Scene update event.\n    *\n    * @method Raycaster#update\n    * @memberof Raycaster\n    * @instance\n    * @since 0.6.0\n    *\n    */\n    update: function() {\n        //update dynamic maps\n        if(this.mappedObjects.length > 0)\n            for(let mapppedObject of this.mappedObjects) {\n                let map;\n\n                if(mapppedObject.type === 'body' || mapppedObject.type === 'composite') {\n                    map = mapppedObject.raycasterMap;\n                }\n                else if(mapppedObject.data) {\n                    map = mapppedObject.data.get('raycasterMap');\n                }\n\n                if(!map)\n                    continue;\n\n                if(map.dynamic)\n                    map.updateMap();\n            }\n    },\n\n    /**\n    * Create {@link Raycaster.Ray Raycaster.Ray} object.\n    *\n    * @method Raycaster#createRay\n    * @memberof Raycaster\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {object} [options] - Ray options:\n    *\n    * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n    */\n    createRay: function(options = {}) {\n        return new this.Ray(options, this);\n    }\n}\n\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\n","/**\n * @classdesc\n *\n * Map class responsible for mapping game objects.\n *\n * @namespace Raycaster.Map\n * @class Raycaster.Map\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Map specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Map(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Map#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.9.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Mapped object's type\n    *\n    * @name Raycaster.Map#type\n    * @type {string}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.type;\n    /**\n    * If set true, map will be tested by ray. Otherwise it will be ignored.\n    *\n    * @name Raycaster.Map#active\n    * @type {boolean}\n    * @default true\n    * @since 0.7.2\n    */\n    this.active;\n    /**\n    * If set true, map will be automatically updated on scene update event.\n    *\n    * @name Raycaster.Map#dynamic\n    * @type {boolean}\n    * @default false\n    * @since 0.6.0\n    */\n    this.dynamic;\n    /**\n    * If set true, map will be treated by ray as circle. Set automaticalyy on map update.\n    *\n    * @name Raycaster.Map#circle\n    * @type {boolean}\n    * @default false\n    * @since 0.9.0\n    */\n    this.circle = false;\n    /**\n    * Reference to mapped object.\n    *\n    * @name Raycaster.Map#object\n    * @type {object}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.object;\n    /**\n    * Array of mapped object's vertices used as rays targets.\n    *\n    * @name Raycaster.Map#_points\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._points = [];\n    /**\n    * Array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @name Raycaster.Map#_segments\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._segments = [];\n    /**\n    * Get array of mapped object's vertices used as rays targets.\n    *\n    * @method Raycaster.Map#getPoints\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n    */\n    this.getPoints;\n    /**\n    * Get array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @method Raycaster.Map#getSegments\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n    */\n    this.getSegments;\n    /**\n    * Get mapped object's bounding box.\n    *\n    * @method Raycaster.Map#getBoundingBox\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.9.0\n    *\n    * @return {Phaser.Geom.Rectangle} - Mapped object's bounding box.\n    */\n    this.getBoundingBox;\n    /**\n    * Update object's map of points and segments.\n    *\n    * @method Raycaster.Map#updateMap\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n    */\n    this.updateMap;\n\n    this.config(options);\n    this.updateMap();\n\n    return this;\n};\n\nMap.prototype = {\n    config: require('./config.js').config\n};\n\nMap.prototype.constructor = Map;\n","let rectangle = require('./map-rectangle-methods.js');\nlet line = require('./map-line-methods.js');\nlet polygon = require('./map-polygon-methods.js');\nlet arc = require('./map-circle-methods.js');\nlet container = require('./map-container-methods.js');\nlet tilemap = require('./map-tilemap-methods.js');\nlet matterBody = require('./map-matterBody-methods.js');\nlet segmentCount = require('./segmentsCount.js');\nlet boundingBox = require('./boundingBox.js');\n\n/**\n * Configure map.\n *\n * @method Raycaster.Map#config\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Map's congfiguration options. May include:\n * @param {object} options.object - Game object to map\n * @param {string} [options.type] - Map type. If not defined, it will be determined based on object.\n * @param {boolean} [options.dynamic = false] - If set true, map will be dynamic (updated on scene update event).\n * @param {boolean} [options.active = true] - If set true, map will be active (will provide points, segments and will be updated).\n * @param {integer} [options.segmentCount] - Circle map's segment count. If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n * @param {boolean} [options.forceConvex] - If set true, matter body map will use convex body (hull) for non-covex bodies.\n * @param {boolean} [options.forceVerticesMapping] - If set true, matter body map will use only vertices for mapping circle bodies.\n * \n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //object type\n    if(options.type === undefined)\n        options.type = options.object.type;\n    if(options.type === 'body' || options.type === 'composite')\n        options.type = 'MatterBody';\n    this.type = options.type;\n    \n    switch(options.type) {\n        case 'Polygon':\n            this.getPoints = polygon.getPoints;\n            this.getSegments = polygon.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = polygon.updateMap;\n            break;\n        case 'Arc':\n            //circle segments count\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\n            this.circle = (options.segmentCount) ? false : true;\n            this.getPoints = arc.getPoints;\n            this.getSegments = arc.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = arc.updateMap;\n            this.setSegmentCount = segmentCount.setSegmentCount;\n            break;\n        case 'Line':\n            this.getPoints = line.getPoints;\n            this.getSegments = line.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = line.updateMap;\n            break;\n        case 'Container':\n            this.getPoints = container.getPoints;\n            this.getSegments = container.getSegments;\n            this.updateMap = container.updateMap;\n            break;\n        case 'StaticTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'DynamicTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'MatterBody':\n            //force convex body (hull) mapping\n            this.forceConvex = (options.forceConvex) ? true : false;\n            //force mapping by vertices\n            this.forceVerticesMapping = (options.forceVerticesMapping) ? true : false;\n            this.circle = false;\n            this.getPoints = matterBody.getPoints;\n            this.getSegments = matterBody.getSegments;\n            this.getBoundingBox = matterBody.getBoundingBox;\n            this.updateMap = matterBody.updateMap;\n            break;\n        default:\n            this.getPoints = rectangle.getPoints;\n            this.getSegments = rectangle.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = rectangle.updateMap;\n    }\n\n    //dynamic map\n    this.dynamic = (options.dynamic == true) ? true : false;\n\n    //enable/disable map\n    this.active = (options.active !== undefined) ? options.active : true;\n\n    return this;\n}\n","/*Map methods for rectangles*/\n/**\n* Get array of mapped rectangle's vertices used as rays targets.\n*\n* @method Raycaster.Map#rectangle.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped rectangle's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#rectangle.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update rectangle's map of points and segments.\n*\n* @method Raycaster.Map#rectangle.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n        \n    let points = [];\n    let segments = [];\n\n    //set points\n    points = [\n        this.object.getTopLeft(),\n        this.object.getTopRight(),\n        this.object.getBottomRight(),\n        this.object.getBottomLeft()\n    ];\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for lines*/\n/**\n* Get array of mapped line's vertices used as rays targets.\n*\n* @method Raycaster.Map#line.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped line's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#line.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update line's map of points and segments.\n*\n* @method Raycaster.Map#line.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    let pointA = this.object.geom.getPointA();\n    let pointB = this.object.geom.getPointB();\n\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n        pointA = vectorA.getPointB();\n\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n        pointB = vectorB.getPointB();\n\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\n    }\n    //if rotation === 0\n    else {\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\n    }\n    \n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for polygons*/\n/**\n* Get array of mapped polygon's vertices used as rays targets.\n*\n* @method Raycaster.Map#polygon.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped polygon's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#polygon.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update polygon's map of points and segments.\n*\n* @method Raycaster.Map#polygon.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        for(let point of this.object.geom.points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            points.push(vector.getPointB());\n        }\n    }\n    //if rotation === 0\n    else {\n        for(let point of this.object.geom.points) {\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \n    }\n    //if polygon is closed\n    if(this.object.closePath) {\n        let last = points.length - 1;\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for circles*/\n/**\n* Get array of mapped circle's vertices used as rays targets.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll calculatoe tangent points for passed ray.\n*\n* @method Raycaster.Map#arc.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    if(this._points.length > 0)\n        return this._points;\n    \n    let points = [];\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\n\n    //calculate tangent rays\n    if(ray) {\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c;\n        \n        let rotation = this.object.rotation;\n        \n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            let cB = vector.getPointB();\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\n        }\n        else { \n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\n        }\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped circle's segments used to test object's intersection with ray.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll return empty array.\n*\n* @method Raycaster.Map#arc.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update circles's map of points and segments.\n*\n* @method Raycaster.Map#arc.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    if(!this.segmentCount) {\n        this._points = [];\n        this._segments = [];\n        return this;\n    }\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\n\n    //get points surrounding circle\n    let points = this.object.geom.getPoints(this.segmentCount);\n    let segments = []\n\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let newPoints = [];\n        for(let point of points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            newPoints.push(vector.getPointB());\n        }\n        points = newPoints;\n    }\n    //if rotation === 0\n    else {\n        for(let point of points) {\n            point.x = point.x * this.object.scaleX + offset.x;\n            point.y = point.y * this.object.scaleY + offset.y;\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for containers*/\n/**\n* Get array of mapped container's and its children vertices used as rays targets.\n*\n* @method Raycaster.Map#container.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false, getCircles = false) {\n    if(!this.active)\n        return [];\n\n    let points = [];\n    if(!getCircles)\n        points = this._points;\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    //get tangent points of container's circles\n    if(ray){\n        //create temporary ray\n        let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\n        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\n\n        let tempRay = ray._raycaster.createRay({\n            origin: {\n                x: vector.getPointB().x,\n                y: vector.getPointB().y\n            }\n        });\n\n        for(let child of this.object.list){\n            if(child.type === 'Arc'){\n\n                let map = child.data.get('raycasterMap');\n                if(map._points.length == 0){\n                    for(let point of map.getPoints(tempRay, true)){\n                        let vector = new Phaser.Geom.Line(0, 0, point.x, point.y);\n                        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\n\n                        points.push(new Phaser.Geom.Point(vector.getPointB().x + offset.x, vector.getPointB().y + offset.y));\n                    }\n                }\n            }\n            else if(child.type === 'Container') {\n                for(let point of child.data.get('raycasterMap').getPoints(tempRay, true)){\n                    if(this.object.rotation !== 0) {\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\n                        points.push(vector.getPointB());\n                    }\n                    //if rotation === 0\n                    else\n                        points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\n                }\n            }\n\n        }\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped container's and its children segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#container.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n\n    return this._segments;\n};\n\n/**\n* Update container's and its children maps of points and segments.\n*\n* @method Raycaster.Map#container.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let container = this.object;\n\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    let rotation = container.rotation;\n\n    //iterate through container's children\n    container.iterate(function(child){\n        if(!child.data)\n            child.setDataEnabled();\n\n        //get child map\n        let map = child.data.get('raycasterMap');\n        if(!map) {\n            map = new this.constructor({\n                object: child,\n                segmentCount: this.segmentCount\n            });\n            child.data.set('raycasterMap', map);\n        }\n        else\n            map.updateMap();\n\n        //add child points\n        let childPoints = [];\n        for(let point of map.getPoints()) {\n            //calculate positions after container's rotation\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                points.push(vector.getPointB());\n            }\n            //if rotation === 0\n            else\n                points.push(new Phaser.Geom.Point(point.x * container.scaleX + offset.x, point.y * container.scaleX + offset.y));\n\n            childPoints.push(points[points.length - 1])\n        }\n\n        //add child segments\n        for(let segment of map.getSegments()) {\n            //calculate positions after container's rotation\n            if(rotation !== 0) {\n                let pointA = segment.getPointA();\n                let pointB = segment.getPointB();\n                let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n                let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n                Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n                Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n\n                segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\n            }\n            //if rotation === 0\n            else\n                segments.push(new Phaser.Geom.Line(segment.getPointA().x * container.scaleX + offset.x, segment.getPointA().y * container.scaleY + offset.y, segment.getPointB().x * container.scaleX + offset.x, segment.getPointB().y * container.scaleY + offset.y));\n        }\n\n    }.bind(this));\n\n    //get children intersections\n    for(let i = 0, iLength = container.list.length; i < iLength; i++){\n        let childA = container.list[i];\n        let mapA = childA.data.get('raycasterMap');\n\n        for(let j = i+1, jLength = container.list.length; j < jLength; j++){\n            let childB = container.list[j];\n            let mapB = childB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\n                continue;\n\n            //find objects intersections\n            for(let segmentA of mapA.getSegments()) {\n                for(let segmentB of mapB.getSegments()) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                     //calculate positions after container's rotation\n                    if(rotation !== 0) {\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, intersection.x * this.object.scaleX + offset.x, intersection.y * this.object.scaleY + offset.y);\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                        points.push(vector.getPointB());\n                    }\n                    //if rotation === 0\n                    else\n                        points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for tilemaps*/\n/**\n* Get array of mapped tilemap's vertices used as rays targets.\n*\n* @method Raycaster.Map#tilemap.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._points;\n\n    let points = [];\n    for(let point of this._points) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, point.x, point.y) <= ray.detectionRange)\n            points.push(point);\n    }\n\n    //get intersections between tilemap's segments and ray's detection range edge\n    let segments = this.getSegments(ray);\n\n    for(let segment of segments) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x1, segment.y1) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x1, segment.y1));\n        \n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x2, segment.y2) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x2, segment.y2));\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped tilemap's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#tilemap.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._segments;\n\n    let segments = [];\n    for(let segment of this._segments) {\n        if(Phaser.Geom.Intersects.LineToCircle(segment, ray.detectionRangeCircle)) {\n            segments.push(segment);\n        }\n    }\n\n    return segments;\n};\n\n/**\n* Update tilemap's map of points and segments.\n*\n* @method Raycaster.Map#tilemap.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x;\n    offset.y = this.object.y;\n\n    let horizontal = false;\n    let horizontals = [];\n    let verticals = [];\n\n    //iterate rows\n    for(let i = 0, iLength = this.object.layer.data.length; i < iLength; i++) {\n        let row = this.object.layer.data[i];\n\n        //iterate row's tiles\n        for(let j = 0, jLength = row.length; j < jLength; j++) {\n            let tile = row[j];\n\n            //check if tile and its top and left neighbours have different are from different sets (rays blocking and non-bloking)\n            let upperEdge = ((i > 0 && this.collisionTiles.includes(this.object.layer.data[i-1][j].index) != this.collisionTiles.includes(tile.index)) || (i == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n            let leftEdge = ((j > 0 && this.collisionTiles.includes(this.object.layer.data[i][j-1].index) != this.collisionTiles.includes(tile.index)) || (j == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n\n            //get current tile's column last vertical line\n            let vertical = false;\n            if(verticals.length <= j)\n                verticals[j] = [];\n            else if(verticals[j].length > 0)\n                vertical = verticals[j][verticals[j].length - 1];\n\n            //check if tile has edge from left\n            if(leftEdge) {\n                if(vertical && vertical.y + vertical.height == i)\n                    vertical.height++;\n                else {\n                    verticals[j].push({\n                        x: tile.x,\n                        y: tile.y,\n                        height: 1\n                    });\n                }\n            }\n\n            //check if tile has edge from top\n            if(upperEdge) {\n                if(horizontal)\n                    horizontal.width++;\n                else\n                    horizontal = {\n                        x: tile.x,\n                        y: tile.y,\n                        width: 1\n                    };\n                continue;\n            }\n\n            if(horizontal) {\n                let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n                let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n                let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n                segments.push(segment);\n                horizontals.push(segment);\n                points.push(new Phaser.Geom.Point(x, y));\n                points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n                horizontal = false;\n            }\n        }\n        \n        //at the end of row add segment if exist\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add bottom horizontal segments\n    for(let tile of this.object.layer.data[this.object.layer.data.length - 1]) {\n        if(this.collisionTiles.includes(tile.index)) {\n            if(horizontal)\n                horizontal.width++;\n            else\n                horizontal = {\n                    x: tile.x,\n                    y: tile.y + 1,\n                    width: 1\n                };\n            continue;\n        }\n\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add segment if exist\n    if(horizontal) {\n        let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n        let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n        let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n        segments.push(segment);\n        horizontals.push(segment);\n        points.push(new Phaser.Geom.Point(x, y));\n        points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n        horizontal = false;\n    }\n    \n    //add right vertical segments\n    let vertical = false;\n    let verticalsLastColumn = [];\n    for(let row of this.object.layer.data) {\n        let tile = row[row.length - 1];\n\n        //if tile blocks ray\n        if(this.collisionTiles.includes(tile.index)) {\n            if(vertical) {\n                vertical.height++;\n            }\n            else {\n                vertical = {\n                    x: tile.x + 1,\n                    y: tile.y,\n                    height: 1\n                };\n            }\n\n            continue;\n        }\n\n        if(vertical) {\n            verticalsLastColumn.push(vertical);\n            vertical = false;\n        }\n    }\n\n    verticals.push(verticalsLastColumn);\n    \n    //add vertical segments\n    for(let column of verticals) {\n        if(!column)\n            continue;\n\n        for(let vertical of column) {\n            let x = vertical.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y1 = vertical.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let y2 = y1 + this.object.layer.tileHeight * this.object.scaleY * vertical.height;\n            let segment = new Phaser.Geom.Line(x, y1, x, y2)\n            segments.push(segment);\n\n            //add points if they're not already there\n            if(!points.filter(point => point.x == x && point.y == y1))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            if(!points.filter(point => point.x == x && point.y == y2))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            //get intersections between horizontal segments and vertical\n            for(let horizontalSegment of horizontals) {\n                if(segment.x1 == horizontalSegment.x1 || segment.x1 == horizontalSegment.x2 || segment.x2 == horizontalSegment.x1 || segment.x2 == horizontalSegment.x2)\n                    continue;\n\n                if(segment.y1 == horizontalSegment.y1 || segment.y1 == horizontalSegment.y2 || segment.y2 == horizontalSegment.y1 || segment.y2 == horizontalSegment.y2)\n                    continue;\n\n                let point = new Phaser.Geom.Point();\n                if(Phaser.Geom.Intersects.LineToLine(segment, horizontalSegment, point)) {\n                    points.push(point);\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n\n/**\n* Set tile types which should be mapped (for Phaser.Tilemaps.StaticTilemapLayer and Phaser.Tilemaps.DynamicTilemapLayer maps only).\n*\n* @method Raycaster.Map#setCollisionTiles\n* @memberof Raycaster.Map\n* @instance\n* @since 0.7.3\n*\n* @param {array} [tiles = []] - Set of tile's indexes to map.\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function setCollisionTiles(tiles = []) {\n    this.collisionTiles = tiles;\n    return this;\n}\n","/*Map methods for matter body*/\n/**\n* Get array of mapped matter body's vertices used as rays targets.\n*\n* @method Raycaster.Map#matterBody.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n\n    //calculate tangent rays\n    if(ray && !this.forceVerticesMapping && body.circleRadius > 0) {\n        let points = [];\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, body.position.x, body.position.y);\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(body.circleRadius * body.scale.x, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((body.circleRadius * body.scale.x) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n\n        return points;\n    }\n\n    return this._points;\n};\n\n/**\n* Get array of mapped matter body's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#matterBody.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update matter body's map of points and segments.\n*\n* @method Raycaster.Map#matterBody.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n    let bodies = [body];\n    let generateBounds = false;\n\n    if(body.circleRadius > 0 && !this.forceVerticesMapping) {\n        this.circle = true;\n        this._points = points;\n        this._segments = segments;\n\n        return this;\n    }\n\n    this.circle = false;\n\n    if(body.type == 'composite')\n        bodies = body.bodies;\n\n    if( ( body.bounds === undefined && body.type == 'composite' ) || ( body.type == 'composite' && this.dynamic ) ) {\n        generateBounds = true;\n    }\n    \n    for(let bodyItem of bodies) {\n        //if convex body\n        if(bodyItem.parts.length === 1 || this.forceConvex) {\n            let vertices = bodyItem.parts[0].vertices;\n\n            points.push(new Phaser.Geom.Point(vertices[0].x, vertices[0].y));\n\n            for(let i = 1, length = vertices.length; i < length; i++) {\n                let pointA = new Phaser.Geom.Point(vertices[i - 1].x, vertices[i - 1].y);\n                let pointB = new Phaser.Geom.Point(vertices[i].x, vertices[i].y);\n\n                points.push(pointB);\n\n                //add segment\n                let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                segments.push(segment);\n            }\n\n            //closing segment\n            let segment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n            segments.push(segment);\n        }\n\n        //if concave body\n        else if(bodyItem.parts.length > 1) {\n            for(let i = 1, length = bodyItem.parts.length; i < length; i++) {\n                let vertices = bodyItem.parts[i].vertices;\n                let pointA = new Phaser.Geom.Point(vertices[0].x, vertices[0].y);\n\n                if(points.find(point => point.x == pointA.x && point.y == pointA.y) === undefined)\n                    points.push(pointA);\n\n                for(let j = 1, length = vertices.length; j < length; j++) {\n                    let pointB = new Phaser.Geom.Point(vertices[j].x, vertices[j].y);\n                    //check if segment was already added\n                    let segmentIndex = segments.findIndex(segment => (segment.x1 == pointA.x && segment.y1 == pointA.y && segment.x2 == pointB.x && segment.y2 == pointB.y) || (segment.x1 == pointB.x && segment.y1 == pointB.y && segment.x2 == pointA.x && segment.y2 == pointA.y));\n                    \n                    if(segmentIndex !== -1) {\n                        segments.splice(segmentIndex, 1);\n                        pointA = pointB;\n                        continue;\n                    }\n                    \n                    if(points.find(point => point.x == pointB.x && point.y == pointB.y) === undefined)\n                        points.push(pointB);\n\n                    //add segment\n                    let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                    segments.push(segment);\n                    \n                    pointA = pointB;\n                }\n                \n                //closing segment\n                let closingSegment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n\n                let segmentIndex = segments.findIndex(segment => (segment.x1 == closingSegment.x1 && segment.y1 == closingSegment.y1 && segment.x2 == closingSegment.x2 && segment.y2 == closingSegment.y2) || (segment.x1 == closingSegment.x2 && segment.y1 == closingSegment.y2 && segment.x2 == closingSegment.x1 && segment.y2 == closingSegment.y1));\n                if(segmentIndex === undefined)\n                    segments.push(closingSegment);\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    if(generateBounds) {\n        let bounds = this._raycaster.scene.matter.composite.bounds(body);\n        body.bounds = bounds;\n    }\n\n    return this;\n};\n\n/**\n* Get matter body's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Matter body's bounding box.\n*/\nexport function getBoundingBox() {\n    let bounds = this.object.type === 'body' || this.object.type === 'composite' ? this.object.bounds : this.object.body.bounds;\n\n    return new Phaser.Geom.Rectangle(bounds.min.x, bounds.min.y, bounds.max.x - bounds.min.x, bounds.max.y - bounds.min.y);\n}\n\n","/**\n * Set segment count for cirle's map.\n * If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n *\n * @method Raycaster.Map#setSegmentCount\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {integer} count - Circle map's segment count.\n *\n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function setSegmentCount(count) {\n    this.segmentCount = count;\n    this.circle = count ? false : true;\n\n    this.updateMap();\n    return this;\n}\n","/**\n* Get mapped object's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Mapped object's bounding box.\n*/\nexport function getBoundingBox() {\n    return this.object.getBounds();\n}\n","/**\n * @classdesc\n *\n * Ray class responsible for casting ray's and testing their collisions with mapped objects.\n *\n * @namespace Raycaster.Ray\n * @class Raycaster.Ray\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Ray specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Ray(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Ray#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.6.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Ray's source position.\n    *\n    * @name Raycaster.Ray#origin\n    * @type {Phaser.Geom.Point}\n    * @since 0.6.0\n    */\n    this.origin = new Phaser.Geom.Point();\n    /**\n    * Ray's representation used to calculating intersections.\n    *\n    * @name Raycaster.Ray#_ray\n    * @type {Phaser.Geom.Line}\n    * @private\n    * @since 0.6.0\n    */\n    this._ray = new Phaser.Geom.Line();\n    /**\n    * Ray's angle in radians.\n    *\n    * @name Raycaster.Ray#angle\n    * @type {float}\n    * @default 0\n    * @since 0.6.0\n    */\n    this.angle = 0;\n    /**\n    * Ray's cone width angle in radians.\n    *\n    * @name Raycaster.Ray#cone\n    * @type {float}\n    * @default 0\n    * @since 0.7.0\n    */\n    this.cone = 0;\n    /**\n    * Ray's maximum range\n    *\n    * @name Raycaster.Ray#rayRange\n    * @type {integer}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.6.0\n    */\n    this.rayRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * Ray's maximum detection range. Objects outside detection range won't be tested.\n    * Ray tests all objects when set to 0.\n    *\n    * @name Raycaster.Ray#detectionRange\n    * @type {integer}\n    * @default\n    * @since 0.6.0\n    */\n    this.detectionRange = 0;\n    /**\n    * Ray's representation of detection range used in calculating if objects are in range.\n    *\n    * @name Raycaster.Ray#detectionRangeCircle\n    * @type {Phaser.Geom.Circle}\n    * @private\n    * @since 0.6.0\n    */\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\n    /**\n    * Ray's maximum collision range of ray's field of view. Radius of {@link Raycaster.Ray#collisionRangeCircle Ray.body}.\n    *\n    * @name Raycaster.Ray#collisionRange\n    * @type {integer}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.8.0\n    */\n    this.collisionRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n    *\n    * @name Raycaster.Ray#ignoreNotIntersectedRays\n    * @type {boolean}\n    * @default true\n    * @since 0.6.0\n    */\n    this.ignoreNotIntersectedRays = true;\n    /**\n    * If set true, ray's hit points will be rounded.\n    *\n    * @name Raycaster.Ray#round\n    * @type {boolean}\n    * @default false\n    * @since 0.8.1\n    */\n    this.round = false;\n    /**\n    * If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n    *\n    * @name Raycaster.Ray#autoSlice\n    * @type {boolean}\n    * @default false\n    * @since 0.8.0\n    */\n    this.autoSlice = false;\n    /**\n    * Array of intersections from last raycast representing field of view.\n    *\n    * @name Raycaster.Ray#intersections\n    * @type {object[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.intersections = [];\n    /**\n    * Array of triangles representing slices of field of view from last raycast.\n    *\n    * @name Raycaster.Ray#slicedIntersections\n    * @type {Phaser.Geom.Triangle[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.slicedIntersections = [];\n\n    /**\n    * Physics body for testing field of view collisions.\n    *\n    * @name Raycaster.Ray#body\n    * @type {object}\n    * @default undefined\n    * @since 0.8.0\n    */\n    //this.body = false;\n    /**\n    * Physics body type.\n    *\n    * @name Raycaster.Ray#body\n    * @type {(bolean|'arcade'|'matter')}\n    * @default false\n    * @since 0.8.0\n    */\n    this.bodyType = false;\n\n    //this.collisionCircle;\n\n    this.config(options);\n};\n\nRay.prototype = {\n    config: require('./config.js').config,\n    setRay: require('./ray.js').setRay,    \n    setOrigin: require('./origin.js').setOrigin,\n    setRayRange: require('./range.js').setRayRange,\n    setAngle: require('./angle.js').setAngle,\n    setAngleDeg: require('./angle.js').setAngleDeg,\n    setCone: require('./cone.js').setCone,\n    setConeDeg: require('./cone.js').setConeDeg,\n    setDetectionRange: require('./range.js').setDetectionRange,\n    boundsInRange: require('./range.js').boundsInRange,\n    cast: require('./cast.js').cast,\n    castCircle: require('./castCircle.js').castCircle,\n    castCone: require('./castCone.js').castCone,\n    slice: require('./slice.js').slice,\n    setCollisionRange: require('./range.js').setCollisionRange,\n    enablePhysics: require('./enablePhysics.js').enablePhysics,\n    overlap: require('./overlap.js').overlap,\n    processOverlap: require('./overlap.js').processOverlap,\n    testArcadeOverlap: require('./overlap.js').testArcadeOverlap,\n    testMatterOverlap: require('./overlap.js').testMatterOverlap\n};\n","/**\n * Configure ray.\n *\n * @method Raycaster.Ray#config\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * @param {Phaser.Geom.Point} [options.origin = {x:0, y:0}] - Ray's position.\n * @param {float} [options.angle = 0] - Ray's angle in radians.\n * @param {float} [options.angleDeg = 0] - Ray's angle in degrees.\n * @param {float} [options.cone = 0] - Ray's cone angle in radians.\n * @param {float} [options.coneDeg = 0] - Ray's cone angle in degrees.\n * @param {integer} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n * @param {integer} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\n * @param {integer} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\n * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\n * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\n * @param {boolean} [options. = false] - If set true, point where ray hit will be rounded.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //origin\n    if(options.origin !== undefined)\n        this.origin.setTo(options.origin.x, options.origin.y);\n\n    //angle\n    if(options.angle !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\n\n    //angle deg\n    if(options.angleDeg !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\n\n    //cone angle\n    if(options.cone !== undefined)\n        this.cone = options.cone;\n\n    //cone angle deg\n    if(options.coneDeg !== undefined)\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //ray range (0 = max)\n    if(options.rayRange !== undefined)\n        this.rayRange = options.rayRange;\n\n    //collision range (0 = max)\n    if(options.collisionRange !== undefined)\n        this.collisionRange = options.collisionRange;\n\n    //detection range (0 = max)\n    if(options.detectionRange !== undefined)\n        this.detectionRange = options.detectionRange;\n\n    //ignore not intersected rays\n    if(options.ignoreNotIntersectedRays !== undefined)\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\n    \n    //round\n    if(options.round !== undefined)\n        this.round = (options.round == true)\n\n    //auto slice\n    if(options.autoSlice !== undefined)\n        this.autoSlice = (options.autoSlice == true)\n\n    //enable physics\n    if(options.enablePhysics !== undefined && options.enablePhysics)\n        this.enablePhysics(options.enablePhysics);\n    \n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    return this;\n}\n","/**\n * Set ray's position, direction (angle) and range.\n *\n * @method Raycaster.Ray#setRay\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n * @param {float} [angle] - Ray's angle in radians.\n * @param {integer} [range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRay(x, y, angle, rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.origin.setTo(x, y);\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    this.rayRange = rayRange;\n\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y, this.detectionRange);\n    return this;\n}\n","/**\n * Set ray's source position.\n *\n * @method Raycaster.Ray#setOrigin\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOrigin(x, y) {\n    this.origin.setTo(x, y);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this.bodyType === 'matter' && this.collisionRange !== Phaser.Math.MAX_SAFE_INTEGER) {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n    else if(this.bodyType === 'arcade') {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n\n    return this;\n}\n","/**\n * Cast ray to find closest intersection with tested mapped objects.\n *\n * @method Raycaster.Ray#cast\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = {Raycaster#mappedObjects}] - Array of game objects to test. If not provided test all mapped game objects.\n * @param {Phaser.Geom.Point} [options.target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\n *\n * @return {(Phaser.Geom.Point|boolean)} Ray's closest intersection with tested objects. Returns false if no intersection has been found.\n */\nexport function cast(options = {}) {\n    let closestIntersection;\n    let closestDistance = this.rayRange;\n    //if bounding box is defined check bounding box intersection\n    if(this._raycaster && this._raycaster.boundingBox) {\n        let intersections = [];\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\n        if(intersections.length === 1)\n            closestIntersection = intersections[0];\n        else if(intersections.length > 1) {\n            for(let intersection of intersections) {\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                if(distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIntersection = intersection;\n                }\n            }\n        }\n        //if ray target is declared\n        else if(options.target){\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\n            //if target is within ray range\n            if(this.rayRange > distance) {\n                closestDistance = distance;\n                closestIntersection = options.target;\n            }\n        }\n    }\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n    \n    for(let object of options.objects) {\n        let map;\n        \n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //check if object is intersected by ray\n        if(!Phaser.Geom.Intersects.GetLineToRectangle(this._ray, map.getBoundingBox()))\n            continue;\n\n        //check intersections\n        for(let segment of map.getSegments(this)) {\n            let intersection = [];\n\n            //if target point is segmemt point\n            if(options.target) {\n                if(\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\n                ) {\n                    intersection = options.target;\n                }\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n                    continue;\n            }\n            //if no intersection continue\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n              continue;\n            \n            //get closest intersection\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n            if(distance < closestDistance) {\n                closestDistance = distance;\n                closestIntersection = intersection;\n            }\n        }\n\n        //check if map is circular\n        if(map.circle) {\n           //if circular map has generated points (besides tangent points to ray)\n            if(map._points.length > 0) {\n                continue;\n            }\n            \n            //check if target point is a circle tangent point to ray\n            if(options.target) {\n                let points = map.getPoints(this);\n                let isTangent = false;\n                for(let point of points) {\n\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = point;\n                            isTangent = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(isTangent)\n                    continue;\n            }\n\n            let circleIntersections = [];\n            let offset = new Phaser.Geom.Point();\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\n\n            //calculate circle's center after rotation\n            let rotation = map.object.rotation;\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                let cB = vector.getPointB();\n                offset.x = cB.x;\n                offset.y = cB.y;\n            }\n\n            //create transformed circle\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\n\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                for(let intersection of circleIntersections) {\n                    //get closest intersection\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                    if(distance < closestDistance) {\n\n                        closestDistance = distance;\n                        closestIntersection = intersection;\n                    }\n                }\n            }\n        }\n    }\n\n    let result;\n    if(!closestIntersection) {\n        if(this.ignoreNotIntersectedRays)\n            return false;\n\n        result = this._ray.getPointB();\n    }\n    else {\n        result = new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\n    }\n\n    if(this.round) {\n        result.x = Math.round(result.x);\n        result.y = Math.round(result.y);\n    }\n    \n    return result;\n}\n","/**\n * Cast ray in all directions to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCircle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects.\n */\nexport function castCircle(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n\n        //if bounding box is defined add bounding box points to \n        if(this._raycaster && this._raycaster.boundingBox) {\n            for(let point of this._raycaster.boundingBox.points) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n                });\n            }\n        }\n\n        for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n            let object = options.objects[i];\n            //if bound in range\n            if(!this.boundsInRange(object))\n                continue;\n            \n            testedObjects.push(object);\n\n            let map;\n            if(object.type === 'body' || object.type === 'composite')\n                map = object.raycasterMap;\n            else\n                map = object.data.get('raycasterMap');\n\n            maps.push(map);\n            //get points and angles\n            for(let point of map.getPoints(this)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n                });\n            }\n\n            //get objects intersections\n            for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n                let objectB = options.objects[j];\n                let mapB;\n                if(objectB.type === 'body' || objectB.type === 'composite')\n                    mapB = objectB.raycasterMap;\n                else {\n                    mapB = objectB.data.get('raycasterMap');\n                }\n                //check if bounding boxes overlap\n                if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                    continue;\n                \n                //find objects intersections\n                for(let segmentA of map.getSegments(this)) {\n                    for(let segmentB of mapB.getSegments(this)) {\n                        let intersection = [];\n                        if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                            continue;\n                        \n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\n                        });\n                    }\n                }\n            }\n        }\n\n        //sort target points by angle\n        rayTargets.sort(function(a, b){\n            //if rays towards points have the same angles promote closer one\n            if(a.angle == b.angle) {\n                if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                    return 1;\n                else\n                    return -1;\n            }\n\n            return a.angle - b.angle;\n        }.bind(this));\n\n        let previousTarget = {\n            angle: false\n        };\n\n        //cast rays\n        for(let target of rayTargets){\n            //if current target is the same as previous one skip loop\n            if(target.angle === previousTarget.angle) {\n                continue;\n            }\n\n            previousTarget = target;\n\n            this.setAngle(target.angle);\n            let intersection = this.cast({\n                objects: testedObjects,\n                target: target.point\n            });\n\n            if(intersection){\n                //if intersection hits target point cast two additional rays\n                let castSides = false;\n                if(this.round) {\n                    let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                    castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n                }\n                else {\n                    castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n                }\n                if(castSides) {\n                    this.setAngle(target.angle - 0.0001);\n                    let intersectionA = this.cast({\n                        objects: testedObjects\n                    });\n\n                    if(intersectionA) {\n                        intersections.push(intersectionA);\n                    }\n\n                    intersections.push(intersection);\n\n                    this.setAngle(target.angle + 0.0001);\n                    let intersectionB = this.cast({\n                        objects: testedObjects\n                    });\n\n                    if(intersectionB) {\n                        intersections.push(intersectionB);\n                    }\n\n                    continue;\n                }\n\n                intersections.push(intersection);\n            }\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice();\n\n    return intersections;\n}\n","/**\n * Cast ray in a cone to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects.\n */\nexport function castCone(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let cone = this.cone;\n    let minAngle = 0;\n    let maxAngle = 0;\n    let angleOffset = 0;\n\n    //set cone\n    if(options.cone !== undefined)\n        cone = options.cone;\n    if(options.coneDeg !== undefined)\n        cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //set cone min and max angle\n    minAngle = this.angle - cone / 2;\n    maxAngle = this.angle + cone / 2;\n\n    //add min and max angle points\n    this.setAngle(minAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: minAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\n    });\n\n    this.setAngle(maxAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: maxAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\n    });\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n\n        //if bounding box is defined add bounding box points to \n        if(this._raycaster && this._raycaster.boundingBox) {\n            for(let point of this._raycaster.boundingBox.points) {\n\n                let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n                let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                    rayTargets.push({\n                        point: point,\n                        angle: angle,\n                        angleOffsetDeg: -angleOffsetDeg\n                    });\n                }\n            }\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else\n                mapB = objectB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\n                            angleOffsetDeg: -angleOffsetDeg\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angleOffsetDeg - b.angleOffsetDeg;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n        \n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point\n        });\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice(intersections, false);\n\n    return intersections;\n}\n","/**\n * Slice ray's field of view represented by polygon or array of points into array of triangles.\n *\n * @method Raycaster.Ray#slice\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {(object[]|Phaser.Geom.Polygon)} [fov = {Ray#fov}] - Array of points or polygon representing field of view. If not passed, filed of view from last raycaste will be used.\n * @param {boolean} [closed = true|{Ray#fov}] - Define if field of view polygon is closed (first and last vertices sholud be connected). If fov was not passed, value depends of last type of casting.\n *\n * @return {Phaser.Geom.Triangle[]} Array of triangles representing slices of field of view.\n */\nexport function slice(intersections = this.intersections, closed = true) {\n    //if intersections is Phaser.Geom.Polygon object\n    if(!Array.isArray(intersections)) {\n        if(intersections.type === 4)\n            intersections = intersections.points;\n        else\n            return [];\n    }\n\n    if(intersections.length === 0)\n        return [];\n\n    let slices = [];\n    for(let i = 0, iLength = intersections.length - 1; i < iLength; i++) {\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[i].x, intersections[i].y, intersections[i+1].x, intersections[i+1].y));\n    }\n\n    if(closed)\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[0].x, intersections[0].y, intersections[intersections.length-1].x, intersections[intersections.length-1].y));\n\n    return slices;\n}\n","/**\n * Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. Physics body can be added only once.\n *\n * @method Raycaster.Ray#enablePhysics\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {'arcade'|'matter'} [type = 'arcade'] - Physics type\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function enablePhysics(type = 'arcade') {\n    \n    if(this.body !== undefined)\n        return this;\n\n    if(type === 'matter') {\n        this.bodyType = 'matter';\n        this.collisionCircle = this._raycaster.scene.add.circle(this.origin.x, this.origin.y, this.collisionRange);\n        this.collisionCircle._ray = this;\n\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'rectangle', x:bounds.rectangle.centerX, y:bounds.rectangle.centerY, width:bounds.rectangle.width, height:bounds.rectangle.height }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n        else {\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'circle' }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n\n        this.body = this.collisionCircle.body;\n        this.body._ray = this;\n    }\n    else {\n        this.bodyType = 'arcade';\n        this._raycaster.scene.physics.add.existing(this.collisionCircle);\n\n        this.body = this.collisionCircle.body;\n        this.body\n            .setCircle(collisionRange)\n            .setAllowGravity(false)\n            .setImmovable(true);\n        this.body._ray = this;\n    }\n\n    return this;\n}\n"],"sourceRoot":""}